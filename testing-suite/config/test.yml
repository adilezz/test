name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: thesis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Set up test database
      run: |
        export TEST_DATABASE_URL="postgresql://postgres:postgres@localhost:5432/thesis_test"
        python -c "
        import psycopg2
        conn = psycopg2.connect('postgresql://postgres:postgres@localhost:5432/postgres')
        conn.autocommit = True
        cursor = conn.cursor()
        cursor.execute('DROP DATABASE IF EXISTS thesis_test')
        cursor.execute('CREATE DATABASE thesis_test')
        conn.close()
        "
    
    - name: Run backend tests
      env:
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/thesis_test
        JWT_SECRET_KEY: test-secret-key
        UPLOAD_DIRECTORY: ./test_uploads
      run: |
        mkdir -p test_uploads
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        coverage report --fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: UI/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd UI
        npm ci
    
    - name: Install Playwright
      run: |
        cd UI
        npx playwright install --with-deps
    
    - name: Build frontend
      run: |
        cd UI
        npm run build
    
    - name: Run frontend tests
      run: |
        cd UI
        npm run test:ui
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: UI/playwright-report/
        retention-days: 30

  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run security tests
      run: |
        bandit -r . -f json -o bandit-report.json
        safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: thesis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Run performance tests
      env:
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/thesis_test
        JWT_SECRET_KEY: test-secret-key
      run: |
        pytest tests/test_performance.py -v --benchmark-only --benchmark-save=performance

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: thesis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
    
    - name: Install frontend dependencies
      run: |
        cd UI
        npm ci
        npx playwright install --with-deps
    
    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/thesis_test
        JWT_SECRET_KEY: test-secret-key
        UPLOAD_DIRECTORY: ./test_uploads
      run: |
        mkdir -p test_uploads
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Start frontend server
      run: |
        cd UI
        npm run dev &
        sleep 10
    
    - name: Run integration tests
      run: |
        cd UI
        npx playwright test --config=playwright.integration.config.ts
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: UI/test-results/
        retention-days: 30